down_tree = class (depth):
  if (depth > 0):
    /left = down_tree (depth - 1)
    /right = down_tree (depth - 1).
  .

up_tree = class: /left, /right, self.

populate_tree = (node, depth):
  if (depth > 0):
    depth--
    populate_tree (node /left = up_tree (), depth)
    populate_tree (node /right = up_tree (), depth).
  .

tree_size = (i):
  (1 << (i + 1)) - 1.

"Stretching memory with a binary tree of depth 20\n" print
temp = down_tree (20)
temp = 0

"Creating a long-lived binary tree of depth 18\n" print
longlived = down_tree (18)

"Creating a long-lived array of 2000000 items\n" print
ary = list (2000000)

i = 4
while (i <= 20):
  iter = 2 * tree_size (20) / tree_size (i)
  ("Creating ", iter, " trees of depth ", i, "\n") join print

  j = 0
  while (j < iter):
    temp = up_tree ()
    populate_tree (temp, i)
    temp = 0
    j++.

  j = 0
  while (j < iter):
    temp = down_tree (i)
    temp = 0
    j++.

  i = i + 2.

0
